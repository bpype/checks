name: Test Suite

on:
  push:
  pull_request:

jobs:
  rust_test:
    name: Rust test
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - uses: EmbarkStudios/cargo-deny-action@v1
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - run: cargo clippy
      - run: cargo llvm-cov --all-features --lcov --output-path lcov.info
      - uses: codecov/codecov-action@v3
        with:
          files: lcov.info

  c_test:
    name: C test
    defaults:
      run:
        working-directory: bindings/c
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - run: cargo clippy
      - run: cargo llvm-cov --all-features --lcov --output-path lcov.info
      - name: Make Build Directory
        run: mkdir -p build
      - name: CMake Configure
        working-directory: bindings/c/build
        run: |
          # Make cmocka a static dependency when testing.
          cmake ../ -DBUILD_SHARED_LIBS=OFF -DCODE_COVERAGE=ON
      - name: CMake Build
        working-directory: bindings/c/build
        run: |
          cmake --build . --config=Debug
      - name: Run Test
        working-directory: bindings/c/build
        run: ctest -C Debug -VV --output-on-failure
      - name: Run Valgrind
        working-directory: bindings/c/build
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt install -y valgrind
          valgrind -v --leak-check=full --show-leak-kinds=all tests/test_check
          valgrind -v --leak-check=full --show-leak-kinds=all tests/test_item
          valgrind -v --leak-check=full --show-leak-kinds=all tests/test_result
          valgrind -v --leak-check=full --show-leak-kinds=all tests/test_runner
          valgrind -v --leak-check=full --show-leak-kinds=all tests/test_status
      - uses: codecov/codecov-action@v3
        with:
          files: lcov.info

  python_test:
    name: Python test
    defaults:
      run:
        working-directory: bindings/python
        shell: bash
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python ${{matrix.python-version}}
        uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python-version}}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install project
        run: poetry install --no-interaction
      - name: Run tests
        run: |
          poetry run pytest --hypothesis-profile default --cov pychecks/ --cov-report=xml -n=auto tests/
      - uses: codecov/codecov-action@v3
        with:
          files: coverage.xml
